{"remainingRequest":"/home/kelraf/code_it/vue/spider-ui/theme/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kelraf/code_it/vue/spider-ui/theme/src/pages/maps/maps/polyline.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kelraf/code_it/vue/spider-ui/theme/src/pages/maps/maps/polyline.vue","mtime":1572858637000},{"path":"/home/kelraf/code_it/vue/spider-ui/theme/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kelraf/code_it/vue/spider-ui/theme/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/kelraf/code_it/vue/spider-ui/theme/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kelraf/code_it/vue/spider-ui/theme/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n\tdata(){\n\t\treturn{\n\t\t\tcenter: {lat: 52, lng: 5},\n\t\t\tedited: null,\n\t\t\tpath: [\n\t\t\t{lat:53.3477, lng:-6.2597},\n\t\t\t{lat:51.5008, lng:-0.1224},\n\t\t\t{lat:48.8567, lng:2.3508},\n\t\t\t{lat:52.5166, lng:13.3833},\n\t\t\t],\n\t\t\tmvcPath: null,\n\t\t\terrorMessage: null,\n\t\t\tpolylineGeojson: '',\n\t\t}\n\t},\n\twatch: {\n\t\tpolylinePath:(function (path) {\n\t\t\tif (path) {\n\t\t\t\tthis.path = path\n\t\t\t\tthis.polylineGeojson = JSON.stringify({\n\t\t\t\t\ttype: 'Polyline',\n\t\t\t\t\tcoordinates: this.path.map(({lat, lng}) => [lng, lat])\n\t\t\t\t}, null, 2)\n\t\t\t}\n\t\t}, 1000)\n\t},\n\tcomputed: {\n\t\tpolylinePath: function () {\n\t\t\tif (!this.mvcPath) return null\n\t\t\t\tlet path = [];\n\t\t\tfor (let j=0; j<this.mvcPath.getLength(); j++) {\n\t\t\t\tlet point = this.mvcPath.getAt(j);\n\t\t\t\tpath.push({lat: point.lat(), lng: point.lng()});\n\t\t\t}\n\t\t\treturn path\n\t\t},\n\t},\n\tmethods: {\n\t\tupdateCenter: function (place) {\n\t\t\tthis.center = {\n\t\t\t\tlat: place.geometry.location.lat(),\n\t\t\t\tlng: place.geometry.location.lng(),\n\t\t\t}\n\t\t},\n\t\tupdateEdited: function (mvcPath) {\n\t\t\tthis.mvcPath = mvcPath\n\t\t},\n\t\thandleClickForDelete($event) {\n\t\t\tif ($event.vertex) {\n\t\t\t\tthis.$refs.polyline.$polylineObject.getPaths()\n\t\t\t\t.getAt($event.path)\n\t\t\t\t.removeAt($event.vertex)\n\t\t\t}\n\t\t},\n\t\treadGeojson: function ($event) {\n\t\t\ttry {\n\t\t\t\tthis.polylineGeojson = $event.target.value\n\t\t\t\tvar v = JSON.parse($event.target.value);\n\t\t\t\tthis.path = v.coordinates\n\t\t\t\t.map(([lng, lat]) => ({lat, lng}))\n\t\t\t\tthis.errorMessage = null\n\t\t\t} catch (err) {\n\t\t\t\tthis.errorMessage = err.message\n\t\t\t}\n\t\t}\n\t}\n}\n",{"version":3,"sources":["polyline.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"polyline.vue","sourceRoot":"src/pages/maps/maps","sourcesContent":["<template>\n\t<div>\n\t\t<GmapMap :center=\"center\" :zoom=\"5\" style=\"width: 100%; height: 500px\" ref=\"map\">\n\t\t\t<GmapPolyline v-if=\"path.length > 0\" :path=\"path\" :editable=\"false\" @path_changed=\"updateEdited($event)\"\n\t\t\t\t@rightclick=\"handleClickForDelete\"\n\t\t\t\tref=\"polyline\">\n\t\t\t</GmapPolyline>\n\t\t</GmapMap>\n\t</div>\n</template>\n<script>\nexport default {\n\tdata(){\n\t\treturn{\n\t\t\tcenter: {lat: 52, lng: 5},\n\t\t\tedited: null,\n\t\t\tpath: [\n\t\t\t{lat:53.3477, lng:-6.2597},\n\t\t\t{lat:51.5008, lng:-0.1224},\n\t\t\t{lat:48.8567, lng:2.3508},\n\t\t\t{lat:52.5166, lng:13.3833},\n\t\t\t],\n\t\t\tmvcPath: null,\n\t\t\terrorMessage: null,\n\t\t\tpolylineGeojson: '',\n\t\t}\n\t},\n\twatch: {\n\t\tpolylinePath:(function (path) {\n\t\t\tif (path) {\n\t\t\t\tthis.path = path\n\t\t\t\tthis.polylineGeojson = JSON.stringify({\n\t\t\t\t\ttype: 'Polyline',\n\t\t\t\t\tcoordinates: this.path.map(({lat, lng}) => [lng, lat])\n\t\t\t\t}, null, 2)\n\t\t\t}\n\t\t}, 1000)\n\t},\n\tcomputed: {\n\t\tpolylinePath: function () {\n\t\t\tif (!this.mvcPath) return null\n\t\t\t\tlet path = [];\n\t\t\tfor (let j=0; j<this.mvcPath.getLength(); j++) {\n\t\t\t\tlet point = this.mvcPath.getAt(j);\n\t\t\t\tpath.push({lat: point.lat(), lng: point.lng()});\n\t\t\t}\n\t\t\treturn path\n\t\t},\n\t},\n\tmethods: {\n\t\tupdateCenter: function (place) {\n\t\t\tthis.center = {\n\t\t\t\tlat: place.geometry.location.lat(),\n\t\t\t\tlng: place.geometry.location.lng(),\n\t\t\t}\n\t\t},\n\t\tupdateEdited: function (mvcPath) {\n\t\t\tthis.mvcPath = mvcPath\n\t\t},\n\t\thandleClickForDelete($event) {\n\t\t\tif ($event.vertex) {\n\t\t\t\tthis.$refs.polyline.$polylineObject.getPaths()\n\t\t\t\t.getAt($event.path)\n\t\t\t\t.removeAt($event.vertex)\n\t\t\t}\n\t\t},\n\t\treadGeojson: function ($event) {\n\t\t\ttry {\n\t\t\t\tthis.polylineGeojson = $event.target.value\n\t\t\t\tvar v = JSON.parse($event.target.value);\n\t\t\t\tthis.path = v.coordinates\n\t\t\t\t.map(([lng, lat]) => ({lat, lng}))\n\t\t\t\tthis.errorMessage = null\n\t\t\t} catch (err) {\n\t\t\t\tthis.errorMessage = err.message\n\t\t\t}\n\t\t}\n\t}\n}\n</script>"]}]}