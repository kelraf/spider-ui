{"remainingRequest":"/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/babel-loader/lib/index.js!/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/eslint-loader/index.js??ref--13-0!/home/kelraf/code_it/vue/spider-ui/spider-ui/src/store/modules/firebase_todo.js","dependencies":[{"path":"/home/kelraf/code_it/vue/spider-ui/spider-ui/src/store/modules/firebase_todo.js","mtime":1572858637000},{"path":"/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\nimport { db } from '@/main';\nvar state = {\n  todo: []\n}; // getters\n\nvar getters = {}; // mutations\n\nvar mutations = {\n  taskcomplete: function taskcomplete(state, payload) {\n    var updatestatus = \"\";\n    state.todo.find(function (list) {\n      if (list.id == payload) {\n        if (list.status == 'complete') {\n          updatestatus = 'incomplete';\n        } else if (list.status == 'incomplete') {\n          updatestatus = 'complete';\n        }\n      }\n    });\n    var updateRef = db.collection('todos').doc(payload);\n    updateRef.update({\n      status: updatestatus\n    });\n  },\n  alltaskcomplete: function alltaskcomplete(state, payload) {\n    var updatestatus = \"\";\n\n    if (payload) {\n      updatestatus = 'complete';\n    } else {\n      updatestatus = 'incomplete';\n    }\n\n    state.todo.forEach(function (list) {\n      var updateRef = db.collection('todos').doc(list.id);\n      updateRef.update({\n        status: updatestatus\n      });\n    });\n  },\n  tododelete: function tododelete(state, payload) {\n    db.collection('todos').doc(payload).delete();\n  },\n  addtodo: function addtodo(state, payload) {\n    db.collection('todos').add({\n      title: payload,\n      delete: false,\n      status: 'incomplete',\n      created: new Date()\n    });\n  },\n  retrieveTodos: function retrieveTodos(state, todos) {\n    state.todo = todos;\n  }\n}; // actions\n\nvar actions = {\n  retrieveTodos: function retrieveTodos(context) {\n    db.collection('todos').get().then(function (querySnapshot) {\n      var tempTodos = [];\n      querySnapshot.forEach(function (doc) {\n        // tempTodos.push(doc.data());\n        tempTodos.push({\n          id: doc.id,\n          title: doc.data().title,\n          delete: doc.data().delete,\n          status: doc.data().status,\n          created: doc.data().created\n        });\n      });\n      var tempTodosSorted = tempTodos.sort(function (a, b) {\n        return a.created.seconds - b.created.seconds;\n      });\n      context.commit('retrieveTodos', tempTodosSorted);\n    });\n  },\n  taskcomplete: function taskcomplete(context, payload) {\n    context.commit('taskcomplete', payload);\n  },\n  alltaskcomplete: function alltaskcomplete(context, payload) {\n    context.commit('alltaskcomplete', payload);\n  },\n  tododelete: function tododelete(context, payload) {\n    context.commit('tododelete', payload);\n  },\n  addtodo: function addtodo(context, payload) {\n    context.commit('addtodo', payload);\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["/home/kelraf/code_it/vue/spider-ui/spider-ui/src/store/modules/firebase_todo.js"],"names":["db","state","todo","getters","mutations","taskcomplete","payload","updatestatus","find","list","id","status","updateRef","collection","doc","update","alltaskcomplete","forEach","tododelete","delete","addtodo","add","title","created","Date","retrieveTodos","todos","actions","context","get","then","querySnapshot","tempTodos","push","data","tempTodosSorted","sort","a","b","seconds","commit","namespaced"],"mappings":";;;AAAA,SAASA,EAAT,QAAmB,QAAnB;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAG;AADG,CAAd,C,CAIA;;AACA,IAAMC,OAAO,GAAG,EAAhB,C,CAIA;;AACA,IAAMC,SAAS,GAAG;AACdC,EAAAA,YAAY,EAAC,sBAACJ,KAAD,EAAOK,OAAP,EAAiB;AAC1B,QAAIC,YAAY,GAAG,EAAnB;AACAN,IAAAA,KAAK,CAACC,IAAN,CAAWM,IAAX,CAAgB,UAAUC,IAAV,EAAgB;AAC5B,UAAIA,IAAI,CAACC,EAAL,IAAWJ,OAAf,EAAwB;AACpB,YAAGG,IAAI,CAACE,MAAL,IAAe,UAAlB,EAA6B;AACzBJ,UAAAA,YAAY,GAAG,YAAf;AACH,SAFD,MAGK,IAAGE,IAAI,CAACE,MAAL,IAAe,YAAlB,EAA+B;AAChCJ,UAAAA,YAAY,GAAG,UAAf;AACH;AACJ;AACJ,KATD;AAWA,QAAMK,SAAS,GAAGZ,EAAE,CAACa,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BR,OAA3B,CAAlB;AACAM,IAAAA,SAAS,CAACG,MAAV,CAAiB;AAAEJ,MAAAA,MAAM,EAACJ;AAAT,KAAjB;AACH,GAhBa;AAiBdS,EAAAA,eAAe,EAAC,yBAACf,KAAD,EAAOK,OAAP,EAAiB;AAC7B,QAAIC,YAAY,GAAG,EAAnB;;AACA,QAAGD,OAAH,EAAY;AACRC,MAAAA,YAAY,GAAG,UAAf;AACH,KAFD,MAEO;AACHA,MAAAA,YAAY,GAAG,YAAf;AACH;;AACDN,IAAAA,KAAK,CAACC,IAAN,CAAWe,OAAX,CAAmB,UAAUR,IAAV,EAAgB;AAC/B,UAAMG,SAAS,GAAGZ,EAAE,CAACa,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BL,IAAI,CAACC,EAAhC,CAAlB;AACAE,MAAAA,SAAS,CAACG,MAAV,CAAiB;AAAEJ,QAAAA,MAAM,EAACJ;AAAT,OAAjB;AACH,KAHD;AAIH,GA5Ba;AA6BdW,EAAAA,UAAU,EAAC,oBAACjB,KAAD,EAAOK,OAAP,EAAiB;AACxBN,IAAAA,EAAE,CAACa,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BR,OAA3B,EAAoCa,MAApC;AACH,GA/Ba;AAgCdC,EAAAA,OAAO,EAAC,iBAACnB,KAAD,EAAOK,OAAP,EAAiB;AACrBN,IAAAA,EAAE,CAACa,UAAH,CAAc,OAAd,EAAuBQ,GAAvB,CAA2B;AACvBC,MAAAA,KAAK,EAAEhB,OADgB;AAEvBa,MAAAA,MAAM,EAAE,KAFe;AAGvBR,MAAAA,MAAM,EAAE,YAHe;AAIvBY,MAAAA,OAAO,EAAE,IAAIC,IAAJ;AAJc,KAA3B;AAMH,GAvCa;AAwCdC,EAAAA,aAxCc,yBAwCAxB,KAxCA,EAwCMyB,KAxCN,EAwCY;AACtBzB,IAAAA,KAAK,CAACC,IAAN,GAAawB,KAAb;AACH;AA1Ca,CAAlB,C,CA8CA;;AACA,IAAMC,OAAO,GAAG;AACZF,EAAAA,aAAa,EAAC,uBAACG,OAAD,EAAW;AACrB5B,IAAAA,EAAE,CAACa,UAAH,CAAc,OAAd,EAAuBgB,GAAvB,GACCC,IADD,CACM,UAACC,aAAD,EAAiB;AACnB,UAAIC,SAAS,GAAG,EAAhB;AAEAD,MAAAA,aAAa,CAACd,OAAd,CAAsB,UAACH,GAAD,EAAO;AACzB;AACAkB,QAAAA,SAAS,CAACC,IAAV,CAAe;AAAEvB,UAAAA,EAAE,EAACI,GAAG,CAACJ,EAAT;AAAaY,UAAAA,KAAK,EAACR,GAAG,CAACoB,IAAJ,GAAWZ,KAA9B;AAAqCH,UAAAA,MAAM,EAACL,GAAG,CAACoB,IAAJ,GAAWf,MAAvD;AAA+DR,UAAAA,MAAM,EAACG,GAAG,CAACoB,IAAJ,GAAWvB,MAAjF;AAAyFY,UAAAA,OAAO,EAACT,GAAG,CAACoB,IAAJ,GAAWX;AAA5G,SAAf;AACH,OAHD;AAKA,UAAIY,eAAe,GAAGH,SAAS,CAACI,IAAV,CAAe,UAACC,CAAD,EAAGC,CAAH,EAAO;AACxC,eAAOD,CAAC,CAACd,OAAF,CAAUgB,OAAV,GAAoBD,CAAC,CAACf,OAAF,CAAUgB,OAArC;AACH,OAFqB,CAAtB;AAIAX,MAAAA,OAAO,CAACY,MAAR,CAAe,eAAf,EAA+BL,eAA/B;AACH,KAdD;AAeH,GAjBW;AAkBZ9B,EAAAA,YAAY,EAAC,sBAACuB,OAAD,EAAUtB,OAAV,EAAsB;AAC/BsB,IAAAA,OAAO,CAACY,MAAR,CAAe,cAAf,EAA8BlC,OAA9B;AACH,GApBW;AAqBZU,EAAAA,eAAe,EAAC,yBAACY,OAAD,EAAStB,OAAT,EAAqB;AACjCsB,IAAAA,OAAO,CAACY,MAAR,CAAe,iBAAf,EAAiClC,OAAjC;AACH,GAvBW;AAwBZY,EAAAA,UAAU,EAAC,oBAACU,OAAD,EAAUtB,OAAV,EAAsB;AAC7BsB,IAAAA,OAAO,CAACY,MAAR,CAAe,YAAf,EAA4BlC,OAA5B;AACH,GA1BW;AA2BZc,EAAAA,OAAO,EAAC,iBAACQ,OAAD,EAAUtB,OAAV,EAAsB;AAC1BsB,IAAAA,OAAO,CAACY,MAAR,CAAe,SAAf,EAAyBlC,OAAzB;AACH;AA7BW,CAAhB;AAgCA,eAAe;AACXmC,EAAAA,UAAU,EAAE,IADD;AAEXxC,EAAAA,KAAK,EAALA,KAFW;AAGXE,EAAAA,OAAO,EAAPA,OAHW;AAIXwB,EAAAA,OAAO,EAAPA,OAJW;AAKXvB,EAAAA,SAAS,EAATA;AALW,CAAf","sourcesContent":["import { db } from '@/main';\n\nconst state = {\n    todo : []\n}\n\n// getters\nconst getters = {\n\n}\n\n// mutations\nconst mutations = {\n    taskcomplete:(state,payload)=>{\n        var updatestatus = \"\";\n        state.todo.find(function (list) {\n            if (list.id == payload) {\n                if(list.status == 'complete'){\n                    updatestatus = 'incomplete'\n                }\n                else if(list.status == 'incomplete'){\n                    updatestatus = 'complete'\n                }\n            }\n        })\n\n        const updateRef = db.collection('todos').doc(payload);\n        updateRef.update({ status:updatestatus })\n    },\n    alltaskcomplete:(state,payload)=>{\n        var updatestatus = \"\";\n        if(payload) {\n            updatestatus = 'complete'    \n        } else {\n            updatestatus = 'incomplete'\n        }\n        state.todo.forEach(function (list) {\n            const updateRef = db.collection('todos').doc(list.id);\n            updateRef.update({ status:updatestatus })\n        })\n    },\n    tododelete:(state,payload)=>{\n        db.collection('todos').doc(payload).delete()\n    },\n    addtodo:(state,payload)=>{\n        db.collection('todos').add({\n            title: payload,\n            delete: false,\n            status: 'incomplete',\n            created: new Date()\n        })\n    },\n    retrieveTodos(state,todos){\n        state.todo = todos\n    }\n\n};\n\n// actions\nconst actions = {\n    retrieveTodos:(context)=>{\n        db.collection('todos').get()\n        .then((querySnapshot)=>{\n            var tempTodos = []\n\n            querySnapshot.forEach((doc)=>{\n                // tempTodos.push(doc.data());\n                tempTodos.push({ id:doc.id, title:doc.data().title, delete:doc.data().delete, status:doc.data().status, created:doc.data().created });\n            })\n\n            var tempTodosSorted = tempTodos.sort((a,b)=>{\n                return a.created.seconds - b.created.seconds\n            })\n\n            context.commit('retrieveTodos',tempTodosSorted)\n        })\n    },\n    taskcomplete:(context, payload) => {\n        context.commit('taskcomplete',payload)\n    },\n    alltaskcomplete:(context,payload) => {\n        context.commit('alltaskcomplete',payload)\n    },\n    tododelete:(context, payload) => {\n        context.commit('tododelete',payload)\n    },\n    addtodo:(context, payload) => {\n        context.commit('addtodo',payload)\n    }\n}\n\nexport default {\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations\n}"]}]}