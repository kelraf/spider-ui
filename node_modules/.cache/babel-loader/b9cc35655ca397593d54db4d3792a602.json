{"remainingRequest":"/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/babel-loader/lib/index.js!/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kelraf/code_it/vue/spider-ui/spider-ui/src/pages/todo/todo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kelraf/code_it/vue/spider-ui/spider-ui/src/pages/todo/todo.vue","mtime":1572858637000},{"path":"/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/kelraf/code_it/vue/spider-ui/spider-ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from \"vuex\";\nexport default {\n  name: 'todo',\n  data: function data() {\n    return {\n      markallread: true,\n      addtask: false,\n      task: ''\n    };\n  },\n  computed: _objectSpread({}, mapState({\n    todolist: function todolist(state) {\n      return state.todo.todo;\n    }\n  })),\n  methods: {\n    taskcomplete: function taskcomplete(id, status) {\n      this.$store.dispatch('todo/taskcomplete', id);\n      if (status != \"complete\") this.$toasted.show(\" tasks marked as complete.\", {\n        theme: 'outline',\n        type: 'success',\n        duration: 2000\n      });else this.$toasted.show(\" tasks marked as incomplete.\", {\n        theme: 'outline',\n        type: 'error',\n        duration: 2000\n      });\n    },\n    alltaskcomplete: function alltaskcomplete() {\n      this.$store.dispatch('todo/alltaskcomplete', this.markallread);\n      this.markallread = !this.markallread;\n      if (this.markallread) this.$toasted.show(\"All tasks marked as Incomplete.\", {\n        theme: 'outline',\n        type: 'error',\n        duration: 2000\n      });else this.$toasted.show(\"All tasks marked as complete.\", {\n        theme: 'outline',\n        type: 'success',\n        duration: 2000\n      });\n    },\n    tododelete: function tododelete(id) {\n      this.$store.dispatch('todo/tododelete', id);\n      this.$toasted.show(\"Task has been deleted.\", {\n        theme: 'outline',\n        type: 'success',\n        duration: 2000\n      });\n    },\n    addnewtask: function addnewtask() {\n      if (this.task != '') {\n        this.$store.dispatch('todo/addtodo', this.task);\n        this.task = '';\n        this.addtask = false;\n        var container = this.$el.querySelector(\".todo-list-body\");\n        setTimeout(function () {\n          container.scrollBy({\n            top: 200,\n            behavior: 'smooth'\n          });\n        }, 310);\n        this.$toasted.show(\"Task list is updated.\", {\n          theme: 'outline',\n          type: 'success',\n          duration: 2000\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["todo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA,SAAA,QAAA,QAAA,MAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,IADA;AAEA,MAAA,OAAA,EAAA,KAFA;AAGA,MAAA,IAAA,EAAA;AAHA,KAAA;AAKA,GARA;AASA,EAAA,QAAA,oBACA,QAAA,CAAA;AACA,IAAA,QAAA,EAAA,kBAAA,KAAA;AAAA,aAAA,KAAA,CAAA,IAAA,CAAA,IAAA;AAAA;AADA,GAAA,CADA,CATA;AAcA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,wBACA,EADA,EACA,MADA,EAEA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,mBAAA,EAAA,EAAA;AAEA,UAAA,MAAA,IAAA,UAAA,EACA,KAAA,QAAA,CAAA,IAAA,CAAA,4BAAA,EAAA;AAAA,QAAA,KAAA,EAAA,SAAA;AAAA,QAAA,IAAA,EAAA,SAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAAA,EADA,KAGA,KAAA,QAAA,CAAA,IAAA,CAAA,8BAAA,EAAA;AAAA,QAAA,KAAA,EAAA,SAAA;AAAA,QAAA,IAAA,EAAA,OAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAAA;AAEA,KAVA;AAWA,IAAA,eAXA,6BAYA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,sBAAA,EAAA,KAAA,WAAA;AACA,WAAA,WAAA,GAAA,CAAA,KAAA,WAAA;AACA,UAAA,KAAA,WAAA,EACA,KAAA,QAAA,CAAA,IAAA,CAAA,iCAAA,EAAA;AAAA,QAAA,KAAA,EAAA,SAAA;AAAA,QAAA,IAAA,EAAA,OAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAAA,EADA,KAGA,KAAA,QAAA,CAAA,IAAA,CAAA,+BAAA,EAAA;AAAA,QAAA,KAAA,EAAA,SAAA;AAAA,QAAA,IAAA,EAAA,SAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAAA;AAEA,KApBA;AAqBA,IAAA,UArBA,sBAqBA,EArBA,EAsBA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,iBAAA,EAAA,EAAA;AACA,WAAA,QAAA,CAAA,IAAA,CAAA,wBAAA,EAAA;AAAA,QAAA,KAAA,EAAA,SAAA;AAAA,QAAA,IAAA,EAAA,SAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAAA;AACA,KAzBA;AA0BA,IAAA,UA1BA,wBA2BA;AACA,UAAA,KAAA,IAAA,IAAA,EAAA,EACA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,cAAA,EAAA,KAAA,IAAA;AACA,aAAA,IAAA,GAAA,EAAA;AACA,aAAA,OAAA,GAAA,KAAA;AACA,YAAA,SAAA,GAAA,KAAA,GAAA,CAAA,aAAA,CAAA,iBAAA,CAAA;AACA,QAAA,UAAA,CAAA,YAAA;AACA,UAAA,SAAA,CAAA,QAAA,CAAA;AAAA,YAAA,GAAA,EAAA,GAAA;AAAA,YAAA,QAAA,EAAA;AAAA,WAAA;AACA,SAFA,EAEA,GAFA,CAAA;AAGA,aAAA,QAAA,CAAA,IAAA,CAAA,uBAAA,EAAA;AAAA,UAAA,KAAA,EAAA,SAAA;AAAA,UAAA,IAAA,EAAA,SAAA;AAAA,UAAA,QAAA,EAAA;AAAA,SAAA;AACA;AAEA;AAxCA;AAdA,CAAA","sourcesContent":["<template>\n    <div>\n        <Breadcrumbs main=\"\" title=\"todo\"/>\n        <!-- Container-fluid starts-->\n          <div class=\"container-fluid\">\n            <div class=\"row\">\n              <div class=\"col-xl-12\">\n                <div class=\"card\">\n                  <div class=\"card-header\">\n                    <h5>To-Do</h5>\n                  </div>\n                  <div class=\"card-body custom-scrollbar\">\n                    <div class=\"todo\">\n                      <div class=\"todo-list-wrapper\">\n                        <div class=\"todo-list-container\">\n                          <div class=\"mark-all-tasks\">\n                            <div @click=\"alltaskcomplete()\" class=\"mark-all-tasks-container\">\n                              <span class=\"mark-all-btn\" :class=\"{'move-down':!markallread}\"  id=\"mark-all-finished\" role=\"button\">\n                                <span class=\"btn-label\">Mark all as finished</span>\n                                <span class=\"action-box completed\">\n                                  <i class=\"icon\">\n                                    <i class=\"icon-check\"></i>\n                                  </i>\n                                </span>\n                              </span>\n                              <span class=\"mark-all-btn \" :class=\"{'move-down':markallread}\" id=\"mark-all-incomplete\" role=\"button\">\n                                <span class=\"btn-label\">Mark all as Incomplete</span>\n                                <span class=\"action-box\">\n                                  <i class=\"icon\">\n                                    <i class=\"icon-check\"></i>\n                                  </i>\n                                </span>\n                              </span>\n                            </div>\n                          </div>\n                          <div class=\"todo-list-body\">\n                            <ul id=\"todo-list\">\n                              <li  v-for=\"(todo,index) in todolist\" :key=\"index\" class=\"task\" :class=\"{'completed':todo.status == 'complete'}\">\n                                <div class=\"task-container\">\n                                  <h4 class=\"task-label\"> {{todo.title}} </h4>\n                                  <span class=\"task-action-btn\">\n                                      <span @click=\"tododelete(todo.id)\" class=\"action-box large delete-btn\" title=\"Delete Task\"><i class=\"icon\"><i class=\"icon-trash\"></i></i></span>\n                                     <span @click=\"taskcomplete(todo.id,todo.status)\" class=\"action-box large complete-btn\" title=\"Mark Complete\"><i class=\"icon\"><i class=\"icon-check\"></i></i></span>\n                                  </span>\n                                </div>\n                              </li>\n                            </ul>\n                          </div>\n\n                          <div class=\"todo-list-footer\">\n                            <div class=\"add-task-btn-wrapper\"><span class=\"add-task-btn\">\n                                <button  @click='addtask =! addtask' class=\"btn btn-primary\" :class=\"{'d-none':addtask}\"><i class=\"icon-plus\"></i> Add new task</button></span></div>\n                            <div class=\"new-task-wrapper \" :class=\"{'visible':addtask}\">\n                              <textarea v-on:keyup.enter=\"addnewtask\" v-model=\"task\" id=\"new-task\" placeholder=\"Enter new task here. . .\"></textarea>\n                              <span @click='addtask = false'  class=\"btn btn-danger cancel-btn\" id=\"close-task-panel\">Close</span>\n                              <span @click=\"addnewtask()\" class=\"btn btn-success ml-3 add-new-task-btn\" id=\"add-task\">Add Task</span>\n                            </div>\n                          </div>\n\n                        </div>\n                      </div>\n                      <div>\n                        <notifications classes=\"task\" group=\"Todolist\" />\n                      </div>\n                    </div>\n\n\n                    <!-- HTML Template for tasks-->\n                    <script id=\"task-template \" type=\"tect/template\">\n                      <li class=\"task\">\n                      <div class=\"task-container\">\n                      <h4 class=\"task-label\"></h4>\n                      <span class=\"task-action-btn\">\n                      <span class=\"action-box large delete-btn\" title=\"Delete Task\">\n                      <i class=\"icon\"><i class=\"icon-trash\"></i></i>\n                      </span>\n                      <span class=\"action-box large complete-btn\" title=\"Mark Complete\">\n                      <i class=\"icon\"><i class=\"icon-check\"></i></i>\n                      </span>\n                      </span>\n                      </div>\n                      </li>\n                    </script>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n      <!-- Container-fluid Ends-->\n    </div>\n</template>\n<script>\n  import { mapState } from \"vuex\";\n  export default {\n    name:'todo',\n    data(){\n      return {\n        markallread :true,\n        addtask :false,\n        task:''\n      }\n    },\n    computed: {\n      ...mapState({\n        todolist: state => state.todo.todo,\n      })\n    },\n    methods:{\n      taskcomplete(id,status)\n      {\n        this.$store.dispatch('todo/taskcomplete', id)\n\n        if(status != \"complete\")\n          this.$toasted.show(\" tasks marked as complete.\", {theme: 'outline', type: 'success', duration: 2000});\n           else\n          this.$toasted.show(\" tasks marked as incomplete.\", {theme: 'outline', type: 'error', duration: 2000});\n\n      },\n      alltaskcomplete()\n      {\n        this.$store.dispatch('todo/alltaskcomplete',this.markallread)\n        this.markallread =! this.markallread\n        if(this.markallread)\n          this.$toasted.show(\"All tasks marked as Incomplete.\",{theme:'outline', type : 'error',duration:2000});\n        else\n         this.$toasted.show(\"All tasks marked as complete.\",{theme:'outline', type : 'success',duration:2000});\n\n      },\n      tododelete(id)\n      {\n        this.$store.dispatch('todo/tododelete', id)\n        this.$toasted.show(\"Task has been deleted.\",{theme:'outline', type : 'success',duration:2000});\n      },\n      addnewtask()\n      {\n        if(this.task != '')\n        {\n          this.$store.dispatch('todo/addtodo', this.task)\n          this.task = ''\n          this.addtask = false\n          var container = this.$el.querySelector(\".todo-list-body\");\n          setTimeout(function () {\n            container.scrollBy({ top: 200, behavior: 'smooth' });\n          }, 310)\n          this.$toasted.show(\"Task list is updated.\",{theme:'outline', type : 'success',duration:2000});\n        }\n\n      }\n    }\n\n\n  }\n</script>\n"],"sourceRoot":"src/pages/todo"}]}